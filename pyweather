#!/usr/bin/python

import forecastio
from geopy.geocoders import Nominatim
import argparse
import sys

# local imports
from apikey import key
import bcolors

# colors
blue = bcolors.Colors.BLUE
green = bcolors.Colors.GREEN
yellow = bcolors.Colors.YELLOW
red = bcolors.Colors.RED
end = bcolors.Colors.END

# argument parser
parser = argparse.ArgumentParser()
parser.add_argument('--location', '-l',
        help = "your location, for example 'Paris, France'")

args = parser.parse_args()
user_input = args.location

# check that input has an argument
if user_input is None:
    print("You should run this program with an argument, run pyweather --h for more information")
    sys.exit()

# city related variables and calls
geolocator = Nominatim()
location = geolocator.geocode(user_input)
lat = location.latitude
lon = location.longitude

# forecast related variables and calls
forecast = forecastio.load_forecast(key, lat, lon, units='si')
byNow = forecast.currently()
summary = byNow.summary
temperature = int(byNow.temperature)
wind = byNow.windSpeed
clouds = byNow.cloudCover
pressure = int(byNow.pressure * 0.7500637554192) # mbar to mmHg


def fancy_icon(summ):

    summ = summ.lower()

    if "overcast" in summ or "cloudy" in summ:
        icon = blue + "☁ " + end
    elif "clear" in summ:
        icon = yellow + "☀ " + end
    elif "snow" in summ:
        icon = "❄"
    elif "drizzle" in summ or "rain" in summ:
        icon = blue + "☂" + end
    else:
        icon = ''
    return icon


def color_cloudcover(cloudcover):

    cloudcover *= 100  # get precents

    if cloudcover > 50:
        cloudcover = (blue + str(cloudcover) + end)
    else:
        cloudcover = (yellow + str(cloudcover) + end)
    return cloudcover


def color_temperature(temp):

    if temp > 25:
        temp = red + str(temp) + end
    elif temp < 25 and temp > 10:
        temp = yellow + str(temp) + end
    else:
        temp = blue + str(temp) + end
    return temp

print(summary)
print(fancy_icon(summary))
print(color_cloudcover(clouds))
print(color_temperature(temperature))